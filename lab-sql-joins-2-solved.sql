# Challenge - Joining on multiple tables

# 1. List the number of films per category.
USE sakila;

SELECT c.name AS category_name, COUNT(fc.film_id) AS number_of_films
FROM category c
JOIN film_category fc
USING (category_id)
GROUP BY category_name;

# 2. Retrieve the store ID, city, and country for each store.
SELECT * FROM city;
SELECT * FROM store;
SELECT * FROM country;

SELECT s.store_id, ci.city, co.country
FROM store s
JOIN address a
USING (address_id)
JOIN city ci
USING (city_id)
JOIN country co
USING (country_id);


# 3. Calculate the total revenue generated by each store in dollars.
SELECT * FROM store;
SELECT * FROM payment;
SELECT * FROM staff;

SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM store s
JOIN staff st
ON s.manager_staff_id = st.staff_id
JOIN payment p
USING (staff_id)
GROUP BY s.store_id;


# 4. Determine the average running time of films for each category.
SELECT * FROM category;
SELECT * FROM film_category;
SELECT * FROM film;

SELECT c.name AS category_name, AVG(f.length) AS average_running_time
FROM category c
JOIN film_category fc
USING (category_id)
JOIN film f
USING (film_id)
GROUP BY category_name;


# Bonus:

# 5. Identify the film categories with the longest average running time.
SELECT * FROM category;
SELECT * FROM film_category;
SELECT * FROM film;

SELECT c.name AS category_name,
       AVG(f.length) AS average_running_time
FROM film_category fc
JOIN film f 
USING (film_id)
JOIN category c 
USING (category_id)
GROUP BY c.name
ORDER BY average_running_time DESC;


# 6. Display the top 10 most frequently rented movies in descending order.
SELECT * FROM film;
SELECT * FROM inventory;
SELECT * FROM rental;

SELECT f.title AS film_title, COUNT(r.rental_id) AS rental_count
FROM film f
JOIN inventory i
USING (film_id)
JOIN rental r
USING (inventory_id)
GROUP BY film_title
ORDER BY rental_count DESC
LIMIT 10;


# 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT * FROM film;
SELECT * FROM inventory;
SELECT * FROM store;

SELECT f.title AS film_title, s.store_id, 
       CASE 
           WHEN i.film_id IS NOT NULL THEN 'Available'
           ELSE 'NOT available'
       END AS availability_status
FROM film f
JOIN inventory i
USING (film_id)
JOIN store s
USING (store_id)
WHERE f.title = 'Academy Dinosaur' AND s.store_id = 1;


# 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
# Include a column indicating whether each title is 'Available' or 'NOT available.' 
# Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT * FROM film;
SELECT * FROM inventory;

SELECT DISTINCT f.title AS film_title,
       CASE
           WHEN IFNULL(i.film_id, 0) > 0 THEN 'Available'
           ELSE 'NOT available'
       END AS availability_status
FROM film f
LEFT JOIN inventory i 
USING (film_id)
ORDER BY f.title;



# Tip 1: This lab involves joins with multiple tables, which can be challenging. Take your time and follow the steps we discussed in class:

-- Make sure you understand the relationships between the tables in the database. This will help you determine which tables to join and which columns to use in your joins.
-- Identify a common column for both tables to use in the ON section of the join. If there isn't a common column, you may need to add another table with a common column.
-- Decide which table you want to use as the left table (immediately after FROM) and which will be the right table (immediately after JOIN).
-- Determine which table you want to include all records from. This will help you decide which type of JOIN to use. If you want all records from the first table, use a LEFT JOIN. If you want all records from the second table, use a RIGHT JOIN. If you want records from both tables only where there is a match, use an INNER JOIN.
-- Use table aliases to make your queries easier to read and understand. This is especially important when working with multiple tables.
-- Write the query

# Tip 2: Break down the problem into smaller, more manageable parts. 
# For example, you might start by writing a query to retrieve data from just two tables before adding additional tables to the join. 
# Test your queries as you go, and check the output carefully to make sure it matches what you expect. 
# This process takes time, so be patient and go step by step to build your query incrementally.